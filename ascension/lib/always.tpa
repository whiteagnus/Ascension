///////////////////////////////////////////
//          LIBRARY OF FUNCTIONS         //
//    Accessible from every component    //
///////////////////////////////////////////

// BG2EE added a new IDS file dir.ids with values for Actions that require a Face parameter and uses the new IDS aliases in scripts
// For non-EE compatibility, we define portable variables so that our script replacement blocks will match in either case
ACTION_IF GAME_IS ~tob~ THEN BEGIN
  OUTER_SET FaceS    = 0
  OUTER_SET FaceSSW  = 1
  OUTER_SET FaceSW   = 2
  OUTER_SET FaceSWW  = 3
  OUTER_SET FaceW    = 4
  OUTER_SET FaceNWW  = 5
  OUTER_SET FaceNW   = 6
  OUTER_SET FaceNNW  = 7
  OUTER_SET FaceN    = 8
  OUTER_SET FaceNNE  = 9
  OUTER_SET FaceNE   = 10
  OUTER_SET FaceNEE  = 11
  OUTER_SET FaceE    = 12
  OUTER_SET FaceSEE  = 13
  OUTER_SET FaceSE   = 14
  OUTER_SET FaceSSE  = 15

  // copied from BG2 Fixpack:  new state needed to fix Dead() triggers that don't use DVs
  APPEND ~state.ids~  ~0x00000FC0 STATE_REALLY_DEAD~      UNLESS ~STATE_REALLY_DEAD~

  // BG2EE also expanded gtimes.ids and spell.ids with additional aliases that we use in some of our scripts
  APPEND ~gtimes.ids~ ~30 FIVE_ROUNDS~                    UNLESS ~FIVE_ROUNDS~                  // ToB classic: not defined in ids file
  APPEND ~gtimes.ids~ ~60 TEN_ROUNDS~                     UNLESS ~TEN_ROUNDS~                   // ToB classic: not defined in ids file
  APPEND ~spell.ids~  ~2302 WIZARD_REMOVE_MAGIC~          UNLESS ~WIZARD_REMOVE_MAGIC~          // ToB classic: WIZARD_DISPEL_MAGIC (EE has both)
  APPEND ~spell.ids~  ~2705 WIZARD_KHELBENS_WARDING_WHIP~ UNLESS ~WIZARD_KHELBENS_WARDING_WHIP~ // ToB classic: WIZARD_WARDING_WHIP (EE has both)
END ELSE BEGIN
  OUTER_SPRINT FaceS    ~S~
  OUTER_SPRINT FaceSSW  ~SSW~
  OUTER_SPRINT FaceSW   ~SW~
  OUTER_SPRINT FaceSWW  ~SWW~
  OUTER_SPRINT FaceW    ~W~
  OUTER_SPRINT FaceNWW  ~NWW~
  OUTER_SPRINT FaceNW   ~NW~
  OUTER_SPRINT FaceNNW  ~NNW~
  OUTER_SPRINT FaceN    ~N~
  OUTER_SPRINT FaceNNE  ~NNE~
  OUTER_SPRINT FaceNE   ~NE~
  OUTER_SPRINT FaceNEE  ~NEE~
  OUTER_SPRINT FaceE    ~E~
  OUTER_SPRINT FaceSEE  ~SEE~
  OUTER_SPRINT FaceSE   ~SE~
  OUTER_SPRINT FaceSSE  ~SSE~
END

/*
This function adds many (simple enough) effects to a bunch of creatures, checking if they already have such an effect and, in that case, replacing it instead of adding a second instance.
It just requires an array called many, whose elements have the shape:
many_[RESOURCE NAME of cre]_[REPLACE option]_[parameter 1]_[parameter 2]=>[opcode]
Each of them will add an effect, with the specified parameters, to the specified creature.
replace==0 means just add effect
replace!=0 means: look for effects with same opcode and par_2 and in that case only update par_%replace% (IE, 1 or 2) with the provided value; otherwise, add the effect from scratch
*/

DEFINE_ACTION_MACRO add_many_cre_effects BEGIN
// With MODDER MISSING_EVAL, this function raises many warnings: WARNING: possible missing EVALUATE_BUFFER in [array name at $"TU_MANY_{some stuff}]
// They can usually be ignored, and give extra info on which values of the array PHP_EACH has looped through
  LOCAL_SET opcode=0
  LOCAL_SET valid=0
  LOCAL_SET found=0
  LOCAL_SET cnt=0
  LOCAL_SET effects_offset=0
  LOCAL_SET effects_num=0
  LOCAL_SPRINT cre ~~
  LOCAL_SPRINT array ~~
  ACTION_PHP_EACH many AS cre => opcode BEGIN //separate effects per creature, to reduce disk access
    ACTION_DEFINE_ASSOCIATIVE_ARRAY TU_MANY BEGIN ~%cre%~ => ~TU_MANY_%cre%~ END //array containing index of creatures to be treated
    ACTION_DEFINE_ASSOCIATIVE_ARRAY EVAL ~TU_MANY_%cre%~ BEGIN ~%cre_1%~ , ~%cre_2%~ , ~%cre_3%~ => ~%opcode%~ END //one array per creature, with effects list
  END
  ACTION_PHP_EACH TU_MANY AS cre => array BEGIN //loop through creatures
    COPY_EXISTING ~%cre%.cre~ ~override~
      LPF FJ_CRE_VALIDITY RET valid=valid END
      PATCH_IF %valid% BEGIN
        PHP_EACH ~%array%~ AS par => opcode BEGIN
          READ_LONG  0x2c4  effects_offset
          READ_LONG  0x2c8  effects_num
          SET found = par //skip next loop if replace is 0
          FOR( cnt=0; cnt<"%effects_num%" AND found; ++cnt ) BEGIN //if effect exists already replace its value only
            PATCH_IF (LONG_AT (%effects_offset%+%cnt%*0x108+8))=%opcode% BEGIN
              PATCH_IF (LONG_AT (%effects_offset%+%cnt%*0x108+24))= %par_2% BEGIN
                SET found=0
                PATCH_IF par==1 BEGIN
                  WRITE_LONG (%effects_offset%+%cnt%*0x108+20) %par_1%
                END
              END
            END
          END //effect already exists?
          PATCH_IF (par=0) OR found BEGIN //still missing or to be added anyway
            LPF ADD_CRE_EFFECT
              INT_VAR
                opcode=EVAL ~%opcode%~
                target=1        //self
                parameter1= EVAL ~%par_1%~
                timing=9        //permanent
                parameter2= EVAL ~%par_2%~    //mod_type
            END
          END //still missing
        END
      END ELSE BEGIN //valid
        PATCH_WARN ~%par%.cre is corrupt, SKIPPING!~
      END
    BUT_ONLY
    ACTION_CLEAR_ARRAY ~%array%~ // clear all specific-creature effect arrays
  END //loop through creatures
  ACTION_CLEAR_ARRAY TU_MANY // creature index
END //DEFINE

// Use following function, instead of the previous one, to be sure no information remains for the next time many is used
DEFINE_ACTION_MACRO add_many_cre_effects_and_clear BEGIN
LAM add_many_cre_effects
ACTION_CLEAR_ARRAY many
END

OUTER_SPRINT TU_NONCHAR ~[^a-zA-Z0-9]*~
OUTER_SPRINT ANL ~[\%MNL%\%LNL%]~

DEFINE_PATCH_FUNCTION TU_MODIFY_BLOCK STR_VAR blockid=~.~ forbid=~[^.]~ search=~~ replace=~~ BEGIN
PATCH_IF (~%blockid%~ STRING_EQUAL ~.~ AND ~%forbid%~ STRING_EQUAL ~[^.]~) OR (~%search%~ STRING_EQUAL ~~) BEGIN
  PATCH_WARN ~TU_MODIFY_BLOCK: invalid arguments; SKIPPING!~
END ELSE BEGIN //STR_VAR sanity check
  //in case script is compiled, decompile it first
  READ_ASCII 0 test (2)
  PATCH_IF ~%test%~ STRING_EQUAL_CASE ~SC~ BEGIN //BCS
    DECOMPILE_BCS_TO_BAF
    recompile=1
  END ELSE BEGIN //BAF
    recompile=0
  END
  // identify single blocks
  FOR (i=2;i>1;i=INDEX_BUFFER(CASE_SENSITIVE EVALUATE_REGEXP ~^%TU_NONCHAR%IF%TU_NONCHAR%$~ i)+2) BEGIN
    j=INDEX_BUFFER(CASE_SENSITIVE EVALUATE_REGEXP ~^%TU_NONCHAR%END%TU_NONCHAR%$~ i)
    PATCH_IF NOT (j+1) BEGIN
      PATCH_FAIL ~Unterminated script block in %SOURCE_RES%~
    END
    ln=j - i
    READ_ASCII i snip (ln)
    INNER_PATCH ~%snip%~ BEGIN //does the block contain the "keyword" (blockid)?
      COUNT_REGEXP_INSTANCES CASE_INSENSITIVE EVALUATE_REGEXP ~%blockid%~ modify
      COUNT_REGEXP_INSTANCES CASE_INSENSITIVE EVALUATE_REGEXP ~%forbid%~ nomodify
    END
    PATCH_IF %modify% AND NOT %nomodify% BEGIN // blockid appears in this block
      DELETE_BYTES i ln
      INNER_PATCH_SAVE snip ~%snip%~ BEGIN
        REPLACE_TEXTUALLY CASE_INSENSITIVE EVALUATE_REGEXP ~%search%~ ~%replace%~
        ln=BUFFER_LENGTH
      END
      INSERT_BYTES i ln
      WRITE_ASCIIE i ~%snip%~ (ln)
    END
  END // loop over all blocks
  // recompile if it was originally a BCS, only
  PATCH_IF %recompile% BEGIN
    COMPILE_BAF_TO_BCS
  END
END //STR_VAR sanity check
END //DEFINE

DEFINE_PATCH_FUNCTION TU_MODIFY_BLOCK_CONTAINING STR_VAR blockid=~~ search=~~ replace=~~ BEGIN
PATCH_IF (~%blockid%~ STRING_EQUAL ~~) OR (~%search%~ STRING_EQUAL ~~) BEGIN
  PATCH_WARN ~TU_MODIFY_BLOCK_CONTAINING: invalid arguments; SKIPPING!~
END ELSE BEGIN //STR_VAR sanity check
  LPF TU_MODIFY_BLOCK STR_VAR blockid=EVAL ~%blockid%~ search=EVAL ~%search%~ replace=EVAL ~%replace%~ END
END //STR_VAR sanity check
END //DEFINE

// Special thanks to Ardanis for adapting/expanding what Nythrun originally wrote.
// Special thanks to Mike1072 for freely sharing this on the Gibberlings 3.

DEFINE_PATCH_FUNCTION ~FJ_SPL_ITM_REINDEX~ BEGIN

PATCH_IF !(~%SOURCE_FILE%~ STRING_MATCHES_REGEXP ~^.+\.spl~) BEGIN
 hs = 0x28
 WRITE_LONG 0xc ~-1~ //Identified name
 WRITE_LONG 0x54 ~-1~ //Identified description
 PATCH_FOR_EACH tz IN 0x44 0x48 0x58 0x5c BEGIN
   WRITE_LONG tz 0
 END
END ELSE PATCH_IF !(~%SOURCE_FILE%~ STRING_MATCHES_REGEXP ~^.+\.itm~) BEGIN
 hs = 0x38
END
READ_LONG 0x64 hf //Extended header offset
READ_SHORT 0x68 hc //Extended header count
READ_LONG 0x6a fb //Feature block table offset
READ_SHORT 0x70 fc //Feature block count
PATCH_IF ((hf > fb) AND (hc > 0)) BEGIN // Ardanis: fixed "hc > 1" to "hc > 0"
 READ_ASCII hf ~eh~ ELSE ~fail~ (hs * hc)
 PATCH_IF (~%eh%~ STRING_EQUAL ~fail~) BEGIN
   WHILE ((~%eh%~ STRING_EQUAL ~fail~) AND (hc > 0)) BEGIN
     READ_ASCII hf ~eh~ ELSE ~fail~ (hs * hc)
     hc -= 1
   END
 END
 DELETE_BYTES hf (hs * hc)
 hf = 0x72
 WRITE_LONG 0x64 hf
 WRITE_SHORT 0x68 hc
 fb = (0x72 + (hs * hc))
 WRITE_LONG 0x6a fb
 PATCH_IF !(~%eh%~ STRING_EQUAL ~fail~) BEGIN
   INSERT_BYTES hf (hs * hc)
   WRITE_ASCIIE hf ~%eh%~
 END
END ELSE PATCH_IF ((hf != 0x72) AND (hc = 0)) BEGIN
 hf = 0x72
 WRITE_LONG 0x64 hf
END
FOR (i1 = 0; i1 < (hs * hc); i1 += hs) BEGIN
 WRITE_SHORT (hf + i1 + 0x20) fc
 READ_SHORT (hf + i1 + 0x1e) cx
 fc += cx
END
PATCH_IF (SOURCE_SIZE > (0x72 + (hs * hc) + (0x30 * fc))) BEGIN
 DELETE_BYTES (0x72 + (hs * hc) + (0x30 * fc)) (SOURCE_SIZE - (0x72 + (hs * hc) + (0x30 * fc)))
END
// added by Ardanis - added by JediMindTrix
WRITE_SHORT 0x6e 0
END //added by JediMindTrix

DEFINE_PATCH_FUNCTION ~ADD_ITEM_HEADER~
 INT_VAR
   type=3
   required_id=0
   location=3
   alt_dicesize=0
   target=1
   target_count=0
   range=0
   projectile_type=0
   alt_dicenumber=0
   speed=0
   alt_damage=0
   thaco=0
   dicesize=0
   school=0
   dicenumber=0
   sectype=0
   damage=0
   damage_type=0
   charges=0
   depletion=0
   flags=0
   projectile=1
   overhand=0
   backhand=0
   thrust=0
   is_bow=0
   is_xbow=0
   is_sling=0

   copy_header=0
   insert_point=~-1~
 STR_VAR
   icon=~~
 RET
   insert_point
BEGIN
 LPF ~FJ_SPL_ITM_REINDEX~ END
 hs=0x38

 READ_LONG 0x64 ho
 READ_SHORT 0x68 hc
 READ_LONG 0x6a eo
 insert_point = (insert_point>hc || insert_point<0) ? hc : insert_point
 copy_header = (copy_header<0) ? 0 : copy_header

 PATCH_IF copy_header>hc BEGIN
   PATCH_WARN ~Unable to copy %copy_header%th header, %SOURCE_FILE% contains only %hc% headers!~
 END ELSE BEGIN
   INSERT_BYTES ho+insert_point*hs hs
   hc+=1
   eo+=hs
   PATCH_IF copy_header BEGIN
     READ_SHORT ho+(copy_header - 1)*hs+0x1e ec
     READ_SHORT ho+(copy_header - 1)*hs+0x20 ei
     READ_ASCII eo+ei*0x30 effs (ec*0x30)
     READ_ASCII ho+(copy_header - 1)*hs copy (hs)
     WRITE_ASCIIE ho+insert_point*hs ~%copy%~ (hs)
   END
   WRITE_SHORT 0x68 hc
   WRITE_LONG 0x6a eo

   READ_SHORT 0x70 ei // technically, it is a counter
   FOR (i=ho;i<ho+hc*hs;i+=hs) BEGIN
     READ_SHORT i+0x1e ec
     WRITE_SHORT i+0x20 ei
     ei+=ec
   END

   PATCH_IF copy_header BEGIN
     READ_SHORT ho+insert_point*hs+0x1e ec
     READ_SHORT ho+insert_point*hs+0x20 ei
     INSERT_BYTES eo+ei*0x30 ec*0x30
     WRITE_ASCIIE eo+ei*0x30 ~%effs%~ (ec*0x30)
   END ELSE BEGIN
     off=ho+insert_point*hs
     WRITE_BYTE off type
     WRITE_BYTE off+0x1 required_id
     WRITE_BYTE off+0x2 location
     WRITE_BYTE off+0x3 alt_dicesize
     WRITE_ASCIIE off+0x4 ~%icon%~ (8)
     WRITE_BYTE off+0xc target
     WRITE_BYTE off+0xd target_count
     WRITE_SHORT off+0xe range
     WRITE_BYTE off+0x10 projectile_type
     WRITE_BYTE off+0x11 alt_dicenumber
     WRITE_BYTE off+0x12 speed
     WRITE_BYTE off+0x13 alt_damage
     WRITE_SHORT off+0x14 thaco
     WRITE_BYTE off+0x16 dicesize
     WRITE_BYTE off+0x17 school
     WRITE_BYTE off+0x18 dicenumber
     WRITE_BYTE off+0x19 sectype
     WRITE_SHORT off+0x1a damage
     WRITE_SHORT off+0x1c damage_type
     WRITE_SHORT off+0x22 charges
     WRITE_SHORT off+0x24 depletion
     WRITE_LONG off+0x26 flags
     WRITE_SHORT off+0x2a projectile
     WRITE_SHORT off+0x2c overhand
     WRITE_SHORT off+0x2e backhand
     WRITE_SHORT off+0x30 thrust
     WRITE_SHORT off+0x32 is_bow
     WRITE_SHORT off+0x34 is_xbow
     WRITE_SHORT off+0x36 is_sling
   END
 END
END

//GWENDOLYNE's FUNCTION FOR SAVE BONUS on SPELL HEADERS
DEFINE_PATCH_FUNCTION ~GW_DEF_OFFSETS_FILE~
    RET GW_oe        // Extended Header offset
        GW_oc        // Extended Header count
        GW_al        // Extended Header length (ability length)
        GW_fx        // Feature blocks offset
        GW_fi        // Equipping-Casting feature blocks index
        GW_fc        // Equipping Feature Blocks count
        GW_min_size  // Minimum size
BEGIN
    READ_ASCII 0 sig (3)
    PATCH_MATCH ~%sig%~ WITH
        ITM    BEGIN    SET GW_oe = 0x64    // Extended Header offset
                    SET GW_oc = 0x68        // Extended Header count
                    SET GW_al = 0x38        // Extended Header length (ability length)
                    SET GW_fx = 0x6a        // Feature blocks offset
                    SET GW_fi = 0x6e        // Equipping feature blocks index
                    SET GW_fc = 0x70        // Equipping Feature Blocks count
                    SET GW_min_size = 0x71  // Minimum size
        END
        SPL    BEGIN    SET GW_oe = 0x64    // Extended Header offset
                    SET GW_oc = 0x68        // Extended Header count
                    SET GW_al = 0x28        // Extended Header length (ability length)
                    SET GW_fx = 0x6a        // Feature Block Table offset
                    SET GW_fi = 0x6e        // Casting Feature Block offset
                    SET GW_fc = 0x70        // Casting Feature Block count
                    SET GW_min_size = 0x71  // Minimum size
        END
        CRE BEGIN    SET GW_oe = 0           // Extended Header offset
                    SET GW_oc = 0            // Extended Header count
                    SET GW_al = 0            // Extended Header length (ability length)
                    SET GW_fx = 0x2c4        // Effects offset
                    SET GW_fi = 0            // Casting Feature Block offset
                    SET GW_fc = 0x2c8        // Effects count
                    SET GW_min_size = 0x2d3  // Minimum size
        END
        DEFAULT
    END
END    // of DEFINE_PATCH_FUNCTION

DEFINE_PATCH_FUNCTION ~GW_MODIFY_ST_BONUS~
    INT_VAR GW_oldbonus      = "-99"      // old bonus to check
            GW_newbonus      = "-99"      // new bonus to write
BEGIN
    PATCH_IF (GW_oe = 0) BEGIN            // Creatures : NO Extended Headers !
        SET abil_off = 0
        SET abil_num = 0
    END ELSE BEGIN
        READ_LONG  GW_oe abil_off
        READ_SHORT GW_oc abil_num
        READ_LONG  GW_fx fx_off
    END
    FOR (i = 0 ; i < abil_num ; ++i) BEGIN                                          // looks through headers
        READ_SHORT (abil_off + 0x1e + GW_al*i) "abil_fx_num"
        READ_SHORT (abil_off + 0x20 + GW_al*i) "abil_fx_idx"
        FOR (j = 0 ; j < abil_fx_num ; ++j ) BEGIN                                  // looks through effects
            READ_LONG (fx_off + 0x24 + (0x30 * (j + abil_fx_idx))) ST               // reads ST
            READ_LONG (fx_off + 0x28 + (0x30 * (j + abil_fx_idx))) savebonus        // reads ST bonus
            PATCH_IF ((GW_oldbonus = savebonus) OR (GW_oldbonus = "-99")) BEGIN
                PATCH_IF ((GW_newbonus != savebonus) AND (GW_newbonus != "-99")) BEGIN
                    WRITE_LONG (fx_off + 0x28 + (0x30 * (j + abil_fx_idx))) GW_newbonus
                END
            END
        END    // of looping through effects
    END        // of looping through heders
END    // of DEFINE_PATCH_FUNCTION
